void SierpinskiTriangle::load_sierpinski_model() {
    std::vector<engine::Model::Vertex> vertices {
        {{0.0f, -0.5f}, {1, 0, 0}},
        {{0.5f, 0.5f}, {0, 1, 0}},
        {{-0.5f, 0.5f}, {0, 0, 1}},
    };

    for (int depth = 0; depth < SIERPINSKI_DEPTH; depth++) {
        std::vector<engine::Model::Vertex> new_vertices;
        for (int vertex = 0; vertex < vertices.size(); vertex += 3) {
            engine::Model::Vertex midpoint_01 = {(vertices[vertex + 0].position + vertices[vertex + 1].position) / 2.0f, (vertices[vertex + 0].color + vertices[vertex + 1].color) / 2.0f};
            engine::Model::Vertex midpoint_02 = {(vertices[vertex + 0].position + vertices[vertex + 2].position) / 2.0f, (vertices[vertex + 0].color + vertices[vertex + 2].color) / 2.0f};
            engine::Model::Vertex midpoint_12 = {(vertices[vertex + 1].position + vertices[vertex + 2].position) / 2.0f, (vertices[vertex + 1].color + vertices[vertex + 2].color) / 2.0f};

            new_vertices.push_back(vertices[vertex + 0]);
            new_vertices.push_back(midpoint_01);
            new_vertices.push_back(midpoint_02);

            new_vertices.push_back(vertices[vertex + 1]);
            new_vertices.push_back(midpoint_01);
            new_vertices.push_back(midpoint_12);

            new_vertices.push_back(vertices[vertex + 2]);
            new_vertices.push_back(midpoint_02);
            new_vertices.push_back(midpoint_12);
        }
        vertices = std::move(new_vertices);
    }

    triangle_model = std::make_unique<engine::Model>(device, vertices);
}